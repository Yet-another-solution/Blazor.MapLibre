name: Build, Test, and Publish Multi-Project Solution

on:
  push:
    branches:
      - "main"
      - "release/*"  # For library publishing
  workflow_dispatch: # Allow manual triggering of the workflow

jobs:
  # Job 1: Build and Test Both Projects
  build:
    name: Build, Test, and Package Library
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      # Step 3: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Step 4: Build both projects
      - name: Build Library and Examples
        run: dotnet build --no-restore -c Release /p:ContinuousIntegrationBuild=true

      # Step 5: Test the Library Project (Optional If You Only Want to Test Library)
      - name: Test Library
        run: dotnet test src/Community.Blazor.MapLibre/Community.Blazor.MapLibre.csproj --verbosity normal -c Release

      # Step 6: Pack the Library for NuGet
      - name: Pack NuGet Library
        if: ((github.event_name == 'push' || github.event_name == 'workflow_dispatch') && startsWith(github.ref_name, 'release'))
        run: dotnet pack src/Community.Blazor.MapLibre/Community.Blazor.MapLibre.csproj -c Release --no-build --output nuget
        # Only pack `Community.Blazor.MapLibre.csproj` for NuGet, not the examples

      # Step 7: Upload NuGet packages as artifact
      - name: Upload NuGet Artifact
        if: ((github.event_name == 'push' || github.event_name == 'workflow_dispatch') && startsWith(github.ref_name, 'release'))
        uses: actions/upload-artifact@v4
        with:
          name: nuget
          path: nuget/

      # Step 8: Prepare Blazor examples for deployment
      - name: Publish Blazor Examples
        if: ((github.event_name == 'push' || github.event_name == 'workflow_dispatch') && startsWith(github.ref_name, 'main'))
        run: dotnet publish examples/Community.Blazor.MapLibre.Examples/Community.Blazor.MapLibre.Examples.csproj -c Release -o blazor_build_output

      # Step 9: Upload Blazor artifacts for deployment
      - name: Upload Blazor Deployment Artifact
        if: ((github.event_name == 'push' || github.event_name == 'workflow_dispatch') && startsWith(github.ref_name, 'main'))
        uses: actions/upload-pages-artifact@v3
        with:
          path: blazor_build_output/wwwroot

  # Job 2: Publish NuGet Package
  publish:
    name: Publish Library to NuGet
    runs-on: ubuntu-latest
    needs: [build]  # Requires the Build job to complete

    if: >
      ((github.event_name == 'push' || github.event_name == 'workflow_dispatch') && startsWith(github.ref_name, 'release'))

    steps:
      # Step 1: Download NuGet package artifact from the Build job
      - name: Download NuGet Artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget
          path: nuget

      # Step 2: Setup .NET in the Publish job
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      # Step 3: Publish the library to NuGet (using GitHub token or API key)
      - name: Publish to NuGet
        run: dotnet nuget push nuget/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  # Job 3: Deploy Blazor Examples
  deploy:
    name: Deploy Blazor Examples
    runs-on: ubuntu-latest
    needs: [build]  # Requires the Build job to complete
    
    if: >
      ((github.event_name == 'push' || github.event_name == 'workflow_dispatch') && startsWith(github.ref_name, 'main'))

    permissions:
      pages: write      # Grant GitHub Pages deploy permissions
      id-token: write   # To verify the deployment source

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4